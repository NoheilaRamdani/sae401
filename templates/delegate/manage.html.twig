{% extends 'base.html.twig' %}

{% block title %}Gestion des délégués{% endblock %}
{% block description %}Gérez les délégués pour chaque TP en MMI{% endblock %}


{% block body %}

    <main class="delegate-page padding">
        <h1>Gestion des délégués</h1>
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div>
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        <div>
            <p>En tant qu'administrateur, vous pouvez désigner et changer les délégués pour chaque groupe.
                Chaque groupe peut avoir jusqu'à 2 délégués actifs à la fois.</p>
        </div>

        <!-- Boutons de sélection des groupes -->
        <div class="group-buttons-container">
            <div class="group-buttons">
                {% for groupData in groupsData %}
                    <button class="group-btn" data-group="group-{{ groupData.group.id }}">{{ groupData.group.name }}</button>
                {% endfor %}
            </div>
        </div>


        {% for groupData in groupsData %}
            <div class="delegate-table group-container" id="group-{{ groupData.group.id }}">
                <div class="row-baseline">
                    <h3>{{ groupData.group.name }}</h3>
                    <span>-</span>
                    <p>Délégués actifs : {{ groupData.activeDelegates|length }}/2</p>
                </div>
<div class="has-table">
    <table>
        <thead>
        <tr>
            <th>Nom</th>
            <th>Prénom</th>
            <th>Email</th>
            <th>Statut</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        {% for userData in groupData.users %}
            {% if userData.isDelegate %}
                <tr class="is-delegate">
            {% else %}
                <tr>
            {% endif %}                            <td>{{ userData.user.lastName }}</td>
            <td>{{ userData.user.firstName }}</td>
            <td>{{ userData.user.email }}</td>
            <td>
                {% if userData.isDelegate %}
                    <span>Délégué</span>
                {% else %}
                    <span>Non délégué</span>
                {% endif %}
            </td>
            <td>
                {% if userData.isDelegate %}
                    <a class="button delegate-btn" href="{{ path('delegate_toggle', {'userId': userData.user.id, 'groupId': groupData.group.id}) }}">
                        Retirer
                    </a>
                {% else %}
                    <a class="button" href="{{ path('delegate_toggle', {'userId': userData.user.id, 'groupId': groupData.group.id}) }}">
                        Désigner
                    </a>
                {% endif %}
            </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>
            </div>
        {% endfor %}

    </main>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const groupButtons = document.querySelectorAll(".group-btn");
            const groupContainers = document.querySelectorAll(".group-container");

            // Stocker et récupérer l'onglet actif comme expliqué précédemment
            let activeGroup = localStorage.getItem("activeGroup") || groupButtons[0].getAttribute("data-group");
            groupContainers.forEach(container => container.style.display = (container.id === activeGroup) ? "block" : "none");
            groupButtons.forEach(button => button.classList.toggle("current", button.getAttribute("data-group") === activeGroup));

            groupButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const targetGroup = this.getAttribute("data-group");
                    localStorage.setItem("activeGroup", targetGroup);
                    groupContainers.forEach(container => container.style.display = (container.id === targetGroup) ? "block" : "none");
                    groupButtons.forEach(btn => btn.classList.remove("current"));
                    this.classList.add("current");
                });
            });

            // Gestion des actions "Désigner" et "Retirer" via AJAX
            document.querySelectorAll(".delegate-btn").forEach(button => {
                button.addEventListener("click", function (event) {
                    event.preventDefault(); // Empêcher le rechargement de la page

                    const url = this.href; // URL de l'action Symfony
                    fetch(url, {
                        method: "GET"
                    }).then(response => {
                        if (response.ok) {
                            return response.text();
                        } else {
                            throw new Error("Erreur lors de la mise à jour.");
                        }
                    }).then(() => {
                        location.reload(); // Rafraîchir uniquement la page, mais conserver l'onglet actif grâce à localStorage
                    }).catch(error => console.error(error));
                });


            });



        });

    </script>

{% endblock %}