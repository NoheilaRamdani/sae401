{% extends 'base.html.twig' %}

{% block title %}Gestion des tâches{% endblock %}
{% block description %}Gérez l'ensemble des tâches de l'agenda MMI{% endblock %}

{% block body %}
    <main class="manage-assignmts padding">
        <h1>Gestion des tâches</h1>

        {# Affichage des messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="flash-{{ label }}">{{ message }}</div>
            {% endfor %}
        {% endfor %}

        {# Formulaire de filtres #}
        <form class="filter-section row-start" method="GET" action="{{ path('manage_assignments') }}">
            <div>
                <label class="sr-only" for="subject">Filtrer par matière :</label>
                <select name="subject" id="subject">
                    <option value="">Toutes les matières</option>
                    {% for subject in subjects %}
                        <option value="{{ subject.id }}" {% if current_subject == subject.id|default('') %}selected{% endif %}>
                            {{ subject.name }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            {% if is_granted('ROLE_ADMIN') %}
                <div>
                    <label class="sr-only" for="group">Filtrer par groupe :</label>
                    <select name="group" id="group">
                        <option value="">Tous les groupes</option>
                        {% for group in groups %}
                            <option value="{{ group.id }}" {% if current_group == group.id|default('') %}selected{% endif %}>
                                {{ group.name }}
                            </option>
                        {% endfor %}
                    </select>
                </div>
            {% endif %}
            <div>
                <button class="button-grey" type="submit">Filtrer</button>
            </div>
        </form>

        {# Liste des devoirs #}
        <div class="has-table">
            {% if assignments|length > 0 %}
                <table>
                    <thead>
                    <tr>
                        <th>Titre</th>
                        <th>Matière</th>
                        <th>Date limite</th>
                        <th>Type</th>
                        <th>Groupes</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for assignment in assignments %}
                        <tr>
                            <td>{{ assignment.title }}</td>
                            <td>{{ assignment.subject.name }}</td>
                            <td>{{ assignment.dueDate|date('d/m/Y H:i') }}</td>
                            <td>{{ assignment.type|capitalize }}</td>
                            <td>
                                {% for group in assignment.groups %}
                                    {{ group.name }}{% if not loop.last %}, {% endif %}
                                {% endfor %}
                            </td>
                            <td class="row-start">
                                <a aria-label="Modifier" class="button-modify" href="{{ path('app_edit_assignment', {'id': assignment.id}) }}"><i class="fa-solid fa-pen"></i></a>
                                <form method="POST" action="{{ path('delete_assignment', {'id': assignment.id}) }}" style="display:inline;" onsubmit="return confirm('Voulez-vous vraiment supprimer ce devoir ?');">
                                    <input aria-label="Supprimer" type="hidden" name="_token" value="{{ csrf_token('delete' ~ assignment.id) }}">
                                    <button aria-label="Supprimer" class="button-delete" type="submit"><i class="fa-solid fa-trash"></i></button>
                                </form>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p>Aucun devoir trouvé.</p>
            {% endif %}
        </div>

        {# Pagination #}
        <div id="pagination" class="row-center"></div>


        {# Lien pour ajouter un nouveau devoir #}
        <a class="button" href="{{ path('add_assignment') }}"><i class="fa-solid fa-plus"></i> Ajouter une nouvelle tâche</a>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function() {
            console.log('jQuery chargé:', typeof $);

            const $rows = $('table tbody tr');
            const totalRows = $rows.length;
            const rowsPerPage = 7;
            const totalPages = Math.ceil(totalRows / rowsPerPage);
            const maxVisiblePages = 3;

            console.log('Lignes trouvées:', totalRows, 'Pages:', totalPages);

            // Masquer la pagination si aucune ligne
            const $pagination = $('#pagination');
            if (totalRows === 0) {
                console.log('Aucune ligne, masquage de la pagination');
                $pagination.hide();
                return;
            }

            // Fonction pour générer les boutons de pagination
            function renderPagination(currentPage) {
                let paginationHtml = '<ul class="pagination row-center">';
                paginationHtml += `<li class="page-item"><a class="page-link row-center" href="#" data-page="first"><i class="fa-solid fa-chevron-left"></i><i class="fa-solid fa-chevron-left"></i><i class="fa-solid fa-chevron-left"></i></a></li>`;
                paginationHtml += `<li class="page-item"><a class="page-link" href="#" data-page="prev"><i class="fa-solid fa-chevron-left"></i></a></li>`;

                // Calculer les pages à afficher (max 3)
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                paginationHtml += `<ul class="compteur row-center">`;

                for (let i = startPage; i <= endPage; i++) {
                    paginationHtml += `
<li class="page-item${i === currentPage ? ' active' : ''} row-center"><a class="page-link" href="#" data-page="${i}" aria-label="Page ${i}">${i}</a></li>
`;
                }
                paginationHtml += `</ul>`;

                paginationHtml += `<li class="page-item">
    <a class="page-link" href="#" data-page="next" aria-label="Page suivante">
        <i class="fa-solid fa-chevron-right"></i>
    </a>
</li>`;

                paginationHtml += `<li class="page-item">
    <a class="page-link row-center" href="#" data-page="last" aria-label="Dernière page">
        <i class="fa-solid fa-chevron-right"></i>
        <i class="fa-solid fa-chevron-right"></i>
        <i class="fa-solid fa-chevron-right"></i>
    </a>
</li>`;

                paginationHtml += '</ul>';


                $pagination.html(paginationHtml);

                // Mettre à jour les états des boutons
                $pagination.find('.page-link[data-page="first"]').parent().toggleClass('disabled', currentPage === 1);
                $pagination.find('.page-link[data-page="prev"]').parent().toggleClass('disabled', currentPage === 1);
                $pagination.find('.page-link[data-page="next"]').parent().toggleClass('disabled', currentPage === totalPages);
                $pagination.find('.page-link[data-page="last"]').parent().toggleClass('disabled', currentPage === totalPages);
            }

            // Afficher la première page au chargement
            $rows.hide();
            $rows.slice(0, rowsPerPage).show();
            renderPagination(1);

            // Gérer les clics sur les boutons
            $pagination.on('click', '.page-link', function(e) {
                e.preventDefault();
                const $this = $(this);
                if ($this.parent().hasClass('disabled') || $this.parent().hasClass('active')) return;

                const currentPage = parseInt($pagination.find('.page-item.active .page-link').attr('data-page')) || 1;
                let newPage = $this.attr('data-page');

                // Calculer la nouvelle page
                if (newPage === 'first') {
                    newPage = 1;
                } else if (newPage === 'last') {
                    newPage = totalPages;
                } else if (newPage === 'prev') {
                    newPage = Math.max(1, currentPage - 1);
                } else if (newPage === 'next') {
                    newPage = Math.min(totalPages, currentPage + 1);
                } else {
                    newPage = parseInt(newPage);
                }

                console.log('Changement de page:', newPage);

                // Mettre à jour l'affichage des lignes
                $rows.hide();
                const startIndex = (newPage - 1) * rowsPerPage;
                const endIndex = startIndex + rowsPerPage;
                $rows.slice(startIndex, endIndex).show();

                // Mettre à jour la pagination
                renderPagination(newPage);
            });
        });
    </script>
{% endblock %}