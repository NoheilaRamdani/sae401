{% extends 'base.html.twig' %}

{% block title %}Tâches{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function filterAssignments() {
            const subjectSelect = document.getElementById('subjectSelect').value;
            const groupSelect = document.getElementById('groupSelect') ? document.getElementById('groupSelect').value : '';
            const url = new URL(window.location.href);
            url.searchParams.set('subject', subjectSelect);
            url.searchParams.set('group', groupSelect);
            window.location.href = url.toString();
        }

        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const subject = urlParams.get('subject') || '';
            const group = urlParams.get('group') || '';
            document.getElementById('subjectSelect').value = subject;
            if (document.getElementById('groupSelect')) {
                document.getElementById('groupSelect').value = group;
            }

            // Gestion du clic sur les tâches pour afficher le modal
            document.querySelectorAll('.task-container').forEach(item => {
                item.addEventListener('click', function(e) {
                    const assignmentId = this.dataset.id;
                    if (!assignmentId) return; // S'assurer qu'il y a un ID
                    fetch(`/api/assignments/${assignmentId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('ID cliqué:', assignmentId);
                            console.log('Data from API:', data);
                            showEventDetails(data);
                        });
                });
            });

            function showEventDetails(event) {
                console.log('Event passé à showEventDetails:', event);

                document.getElementById('modalTitle').textContent = event.title || 'Sans titre';
                const dueDate = new Date(event.start);
                const day = String(dueDate.getUTCDate()).padStart(2, '0');
                const month = String(dueDate.getUTCMonth() + 1).padStart(2, '0');
                const year = dueDate.getUTCFullYear();
                const hours = String(dueDate.getUTCHours()).padStart(2, '0');
                const minutes = String(dueDate.getUTCMinutes()).padStart(2, '0');
                document.getElementById('modalDate').textContent = `${day}/${month}/${year} - ${hours}:${minutes}` || 'Date inconnue';                document.getElementById('modalDescription').textContent = event.description || 'Aucune description';

                document.getElementById('modalSubjectCode').textContent = event.subject?.code || 'Non spécifié';
                document.getElementById('modalSubjectName').textContent = event.subject?.name || 'Non spécifié';

                const submissionUrlEl = document.getElementById('modalSubmissionUrl');
                if (event.submissionUrl) {
                    submissionUrlEl.innerHTML = `<a href="${event.submissionUrl}" target="_blank">${event.submissionUrl}</a>`;
                } else {
                    submissionUrlEl.textContent = 'Aucune URL de rendu';
                }

                const submissionTypeDisplay = (event.submissionType && event.submissionType.toLowerCase() === 'other') ? 'Autre' : event.submissionType || 'Non spécifié';
                document.getElementById('modalSubmissionType').textContent = submissionTypeDisplay;

                const submissionOtherContainer = document.getElementById('modalSubmissionOtherContainer');
                if (event.submissionType && event.submissionType.toLowerCase() === 'other' && event.submissionOther) {
                    document.getElementById('modalSubmissionOther').textContent = event.submissionOther;
                    submissionOtherContainer.style.display = 'block';
                } else {
                    submissionOtherContainer.style.display = 'none';
                }

                document.getElementById('modalType').textContent = event.type || 'Non spécifié';
                document.getElementById('modalCompleted').checked = event.isCompleted || false;
                document.getElementById('eventModal').dataset.id = event.id;

                const editAssignmentLink = document.getElementById('editAssignment');
                if (editAssignmentLink) {
                    editAssignmentLink.href = `/assignments/${event.id}/edit`;
                }

                document.getElementById('eventModal').style.display = 'flex';

                const modalCheckbox = document.getElementById('modalCompleted');
                modalCheckbox.addEventListener('change', function() {
                    const eventId = document.getElementById('eventModal').dataset.id;
                    const isCompleted = this.checked;

                    fetch(`/api/assignments/${eventId}/toggle-complete`, {
                        method: 'POST'
                    }).then(response => response.json())
                        .then(data => {
                            const listItem = document.querySelector(`div[data-id="${eventId}"]`);
                            if (listItem) {
                                const nameElement = listItem.querySelector('.name');
                                if (data.isCompleted) {
                                    nameElement.classList.add('completed-task');
                                } else {
                                    nameElement.classList.remove('completed-task');
                                }
                                const statusElement = listItem.querySelector('.status');
                                statusElement.innerHTML = data.isCompleted
                                    ? '<span><i class="fa-solid fa-circle-check"></i></span> Terminé'
                                    : '<span><i class="fa-solid fa-circle-notch"></i></span> En cours';
                            }
                        });
                });
            }

            document.getElementById('closeModal').addEventListener('click', function() {
                document.getElementById('eventModal').style.display = 'none';
            });

            const suggestModificationBtn = document.getElementById('suggestModification');
            if (suggestModificationBtn) {
                suggestModificationBtn.addEventListener('click', function() {
                    const eventId = document.getElementById('eventModal').dataset.id;
                    window.location.href = `/assignment/${eventId}/suggest`;
                });
            }
        });
    </script>
{% endblock %}

{% block body %}
    <main class="all-tasks padding">
        <div class="filter-section">
            <div class="filter-container">
                <h1>Toutes les tâches</h1>
                <div class="filter">
                    <label for="subjectSelect">Sélectionner une matière</label>
                    <select id="subjectSelect" name="subject">
                        <option value="">Toutes les matières</option>
                        {% if subjects is defined and subjects|length > 0 %}
                            {% for subject in subjects %}
                                <option value="{{ subject.id }}" {{ subject.id == current_subject ? 'selected' }}>{{ subject.name }}</option>
                            {% endfor %}
                        {% else %}
                            <option disabled>Aucune matière disponible</option>
                        {% endif %}
                    </select>
                </div>

                {% if is_delegate_or_admin %}
                    <div class="filter">
                        <label for="groupSelect">Sélectionner un groupe</label>
                        <select id="groupSelect" name="group">
                            <option value="">Tous les groupes</option>
                            {% if groups is defined and groups|length > 0 %}
                                {% for group in groups %}
                                    <option value="{{ group.id }}" {{ group.id == current_group ? 'selected' }}>{{ group.name }}</option>
                                {% endfor %}
                            {% else %}
                                <option disabled>Aucun groupe disponible</option>
                            {% endif %}
                        </select>
                    </div>
                {% endif %}
                <button class="button-grey" onclick="filterAssignments()"><i class="fa-solid fa-filter"></i> Filtrer</button>
            </div>
            <a class="button back-btn" href="/"><i class="fa-solid fa-arrow-left"></i> Retour à l'accueil</a>
        </div>

        <div id="assignmentsContainer" class="column-start">
            {% if assignments|length > 0 %}
                {% for assignment in assignments %}
                    {% set now = "now"|date('U') %}
                    {% set dueDate = assignment.dueDate|date('U') %}
                    {% set daysUntilDue = (dueDate - now) / (60 * 60 * 24) %}
                    {% set daysUntilDue = daysUntilDue|round(0, 'floor') %}
                    {% set hoursUntilDue = (dueDate - now) / (60 * 60) %}
                    {% set hoursUntilDue = hoursUntilDue|round(0, 'floor') %}
                    {% set urgencyClass = hoursUntilDue < 0 ? 'expired' : (hoursUntilDue < 24 ? 'urgent' : (hoursUntilDue <= 48 ? 'soon' : 'ontime')) %}
                    <div class="task-container column-start"
                         data-id="{{ assignment.id }}"
                         data-subject="{{ assignment.subject.id }}"
                         data-groups="{{ assignment.groups|map(group => group.id)|join(',') }}">
                        <span class="color" style="background-color: {{ assignment.subject.color }}"></span>
                        <div class="top row-start">
                            <p class="date">{{ assignment.dueDate|date('d/m/Y - H:i') }}</p>
                            <p class="tag-small">{{ assignment.type|capitalize }}</p>
                        </div>
                        <div class="content row-spacebtwn">
                            <div class="task column-start-start">
                                <div class="details row-start">
                                    <p class="name {% if assignment.isCompleted %}completed-task{% endif %}">
                                        {{ assignment.title }}
                                    </p>
                                    <p class="subject">| {{ assignment.subject.name }}</p>
                                </div>
                                <p class="description">{{ assignment.description }}</p>
                                <p class="groupes">
                                    <span class="title">Groupes :</span>
                                    {% if assignment.groups|length > 0 %}
                                        {% for group in assignment.groups %}
                                            {{ group.name }}{% if not loop.last %} - {% endif %}
                                        {% endfor %}
                                    {% else %}
                                        Aucun groupe
                                    {% endif %}
                                </p>
                            </div>
                            <div class="countdown row-start">
                                <i class="fa-solid fa-clock {{ urgencyClass }}"></i>
                                <p class="{{ hoursUntilDue < 24 and hoursUntilDue >= 0 ? 'urgent-time' : '' }}">
                                    {% if hoursUntilDue < 0 %}
                                        Expiré
                                    {% elseif hoursUntilDue < 24 %}
                                        {{ hoursUntilDue }} heure{{ hoursUntilDue > 1 ? 's' : '' }}
                                    {% else %}
                                        {{ daysUntilDue }} jour{{ daysUntilDue > 1 ? 's' : '' }}
                                    {% endif %}
                                </p>
                            </div>
                            <p class="status row-start">
                                <span>{{ assignment.isCompleted ? '<i class="fa-solid fa-circle-check"></i>' : '<i class="fa-solid fa-circle-notch"></i>' }}</span>
                                {{ assignment.isCompleted ? 'Terminé' : 'En cours' }}
                            </p>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <p>Aucune tâche trouvée.</p>
            {% endif %}
        </div>

        {# Ajout du modal identique à celui de home #}
        <div id="eventModal" class="modal-container" style="display: none;">
            <div class="modal">
                <button id="closeModal"><i class="fa-solid fa-xmark"></i></button>
                <h3 id="modalTitle"></h3>
                <ul>
                    <li id="modalType" class="tag"></li>
                    <li class="title"><i class="fa-solid fa-bookmark"></i> Matière</li>
                    <li><span id="modalSubjectCode"></span> - <span id="modalSubjectName"></span></li>
                    <li class="title"><i class="fa-solid fa-calendar-day"></i> Date</li>
                    <li id="modalDate"></li>
                    <li class="title"><i class="fa-solid fa-file-lines"></i> Description</li>
                    <li id="modalDescription"></li>
                    <li class="plateformes">
                        <span class="title"><i class="fa-solid fa-layer-group"></i> Consignes et rendu</span>
                        <ul>
                            <li>- <span class="subtitle">Sujet</span> : <span id="modalSubmissionType"></span></li>
                            <li>- <span class="subtitle">Mode de rendu</span> : <span id="modalSubmissionInstruction"></span></li>
                            <li id="modalSubmissionOtherContainer" style="display: none;"><span class="subtitle">Précision</span> : <span id="modalSubmissionOther"></span></li>
                            <li>- <span class="subtitle">URL de rendu</span> : <span id="modalSubmissionUrl"></span></li>
                        </ul>
                    </li>
                    <div class="done">
                        <input type="checkbox" id="modalCompleted" name="done" />
                        <label for="done">Fait</label>
                    </div>
                </ul>

                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DELEGATE') %}
                    <a class="button" href="" id="editAssignment"><i class="fa-solid fa-pencil"></i> Modifier le devoir</a>
                {% else %}
                    <button class="button" id="suggestModification"><i class="fa-solid fa-pencil"></i> Suggérer une modification</button>
                {% endif %}
            </div>
        </div>
    </main>
{% endblock %}