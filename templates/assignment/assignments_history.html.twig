{% extends 'base.html.twig' %}

{% block title %}Tâches{% endblock %}
{% block description %}Retrouvez ici toutes vos tâches et suivez votre progression.{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function filterAssignments() {
            const subjectSelect = document.getElementById('subjectSelect').value;
            const groupSelect = document.getElementById('groupSelect') ? document.getElementById('groupSelect').value : '';
            const url = new URL(window.location.href);
            url.searchParams.set('subject', subjectSelect);
            url.searchParams.set('group', groupSelect);
            window.location.href = url.toString();
        }

        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const subject = urlParams.get('subject') || '';
            const group = urlParams.get('group') || '';
            document.getElementById('subjectSelect').value = subject;
            if (document.getElementById('groupSelect')) {
                document.getElementById('groupSelect').value = group;
            }

            // Initialiser la gestion des tâches terminées
            initTaskManager({
                selector: '.task-container',
                hasCalendar: false
            });
        });

        $(document).ready(function() {
            console.log('jQuery chargé:', typeof $);

            const $tasks = $('#assignmentsContainer .task-container');
            const totalTasks = $tasks.length;
            const tasksPerPage = 4;
            const totalPages = Math.ceil(totalTasks / tasksPerPage);
            const maxVisiblePages = 3;

            console.log('Tâches trouvées:', totalTasks, 'Pages:', totalPages);

            // Masquer la pagination si aucune tâche
            const $pagination = $('#pagination');
            if (totalTasks === 0) {
                console.log('Aucune tâche, masquage de la pagination');
                $pagination.hide();
                return;
            }

            // Fonction pour générer les boutons de pagination
            function renderPagination(currentPage) {
                let paginationHtml = '<ul class="pagination row-center">';
                paginationHtml += `<li class="page-item"><a class="page-link row-center" href="#" data-page="first"><i class="fa-solid fa-chevron-left"></i><i class="fa-solid fa-chevron-left"></i><i class="fa-solid fa-chevron-left"></i></a></li>`;
                paginationHtml += `<li class="page-item"><a class="page-link" href="#" data-page="prev"><i class="fa-solid fa-chevron-left"></i></a></li>`;

                // Calculer les pages à afficher (max 3)
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    paginationHtml += `<li class="page-item${i === currentPage ? ' active' : ''} row-center"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }

                paginationHtml += `<li class="page-item"><a class="page-link" href="#" data-page="next"><i class="fa-solid fa-chevron-right"></i></a></li>`;
                paginationHtml += `<li class="page-item"><a class="page-link row-center" href="#" data-page="last"><i class="fa-solid fa-chevron-right"></i><i class="fa-solid fa-chevron-right"></i><i class="fa-solid fa-chevron-right"></i></a></li>`;
                paginationHtml += '</ul>';

                $pagination.html(paginationHtml);

                // Mettre à jour les états des boutons
                $pagination.find('.page-link[data-page="first"]').parent().toggleClass('disabled', currentPage === 1);
                $pagination.find('.page-link[data-page="prev"]').parent().toggleClass('disabled', currentPage === 1);
                $pagination.find('.page-link[data-page="next"]').parent().toggleClass('disabled', currentPage === totalPages);
                $pagination.find('.page-link[data-page="last"]').parent().toggleClass('disabled', currentPage === totalPages);
            }

            // Afficher la première page au chargement
            $tasks.hide();
            $tasks.slice(0, tasksPerPage).show();
            renderPagination(1);

            // Gérer les clics sur les boutons
            $pagination.on('click', '.page-link', function(e) {
                e.preventDefault();
                const $this = $(this);
                if ($this.parent().hasClass('disabled') || $this.parent().hasClass('active')) return;

                const currentPage = parseInt($pagination.find('.page-item.active .page-link').attr('data-page')) || 1;
                let newPage = $this.attr('data-page');

                // Calculer la nouvelle page
                if (newPage === 'first') {
                    newPage = 1;
                } else if (newPage === 'last') {
                    newPage = totalPages;
                } else if (newPage === 'prev') {
                    newPage = Math.max(1, currentPage - 1);
                } else if (newPage === 'next') {
                    newPage = Math.min(totalPages, currentPage + 1);
                } else {
                    newPage = parseInt(newPage);
                }

                console.log('Changement de page:', newPage);

                // Mettre à jour l'affichage des tâches
                $tasks.hide();
                const startIndex = (newPage - 1) * tasksPerPage;
                const endIndex = startIndex + tasksPerPage;
                $tasks.slice(startIndex, endIndex).show();

                // Mettre à jour la pagination
                renderPagination(newPage);
            });
        });

    </script>
{% endblock %}

{% block body %}
    <main class="all-tasks padding">
        <div class="filter-section">
            <div class="filter-container">
                <h1>Toutes les tâches</h1>
                <div class="filters-container">
                    <div class="filter">
                        <label for="subjectSelect">Sélectionner une matière</label>
                        <select id="subjectSelect" name="subject">
                            <option value="">Toutes les matières</option>
                            {% if subjects is defined and subjects|length > 0 %}
                                {% for subject in subjects %}
                                    <option value="{{ subject.id }}" {{ subject.id == current_subject ? 'selected' }}>{{ subject.name }}</option>
                                {% endfor %}
                            {% else %}
                                <option disabled>Aucune matière disponible</option>
                            {% endif %}
                        </select>
                    </div>

                    {% if is_delegate_or_admin %}
                        <div class="filter">
                            <label for="groupSelect">Sélectionner un groupe</label>
                            <select id="groupSelect" name="group">
                                <option value="">Tous les groupes</option>
                                {% if groups is defined and groups|length > 0 %}
                                    {% for group in groups %}
                                        <option value="{{ group.id }}" {{ group.id == current_group ? 'selected' }}>{{ group.name }}</option>
                                    {% endfor %}
                                {% else %}
                                    <option disabled>Aucun groupe disponible</option>
                                {% endif %}
                            </select>
                        </div>
                    {% endif %}
                    <button class="button-grey" onclick="filterAssignments()"><i class="fa-solid fa-filter"></i> Filtrer</button>
                </div>

            </div>
            <a class="button back-btn" href="/"><i class="fa-solid fa-arrow-left"></i> Retour à l'accueil</a>
        </div>

        <div id="assignmentsContainer">
            {% if assignments|length > 0 %}
                {% for assignment in assignments %}
                    {% set now = "now"|date('U') %}
                    {% set dueDate = assignment.dueDate|date('U') %}
                    {% set daysUntilDue = (dueDate - now) / (60 * 60 * 24) %}
                    {% set daysUntilDue = daysUntilDue|round(0, 'floor') %}
                    {% set hoursUntilDue = (dueDate - now) / (60 * 60) %}
                    {% set hoursUntilDue = hoursUntilDue|round(0, 'floor') %}
                    {% set urgencyClass = hoursUntilDue < 0 ? 'expired' : (hoursUntilDue < 24 ? 'urgent' : (hoursUntilDue <= 72 ? 'soon' : 'ontime')) %}
                    <div class="task-container column-start {{ urgencyClass }}"
                         data-id="{{ assignment.id }}"
                         data-subject="{{ assignment.subject.id }}"
                         data-groups="{{ assignment.groups|map(group => group.id)|join(',') }}">
                        <span class="color" style="background-color: {{ assignment.subject.color }}"></span>
                        <div class="top row-start">
                            <p class="date">{{ assignment.dueDate|date('d/m/Y - H:i') }}</p>
                            <p class="tag-small">{{ assignment.type|capitalize }}</p>
                        </div>
                        <div class="content row-spacebtwn">
                            <div class="task column-start-start">
                                <div class="details row-start">
                                    <p class="name check-enabled">{{ assignment.title }}</p>
                                    <p class="subject check-enabled">| {{ assignment.subject.name }}</p>
                                </div>
                                <p class="description">{{ assignment.description }}</p>
                                <p class="groupes">
                                    <span class="title">Groupe(s) :</span>
                                    {% if assignment.groups|length > 0 %}
                                        {% for group in assignment.groups %}
                                            {{ group.name }}{% if not loop.last %} - {% endif %}
                                        {% endfor %}
                                    {% else %}
                                        Aucun groupe
                                    {% endif %}
                                </p>
                            </div>
                            <div class="countdown row-start">
                                <i class="check-enabled fa-solid fa-clock {{ urgencyClass }}"></i>
                                <p class="check-enabled {{ hoursUntilDue < 24 and hoursUntilDue >= 0 ? 'urgent-time' : '' }}">
                                    {% if hoursUntilDue < 0 %}
                                        Expiré
                                    {% elseif hoursUntilDue < 24 %}
                                        {{ hoursUntilDue }} heure{{ hoursUntilDue > 1 ? 's' : '' }}
                                    {% else %}
                                        {{ daysUntilDue }} jour{{ daysUntilDue > 1 ? 's' : '' }}
                                    {% endif %}
                                </p>
                            </div>
                            <p class="status row-start">
                                <span>{{ assignment.isCompleted ? '<i class="fa-solid fa-circle-check"></i>' : '<i class="fa-solid fa-circle-notch"></i>' }}</span>
                                {{ assignment.isCompleted ? 'Terminé' : 'En cours' }}
                            </p>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <p>Aucune tâche trouvée.</p>
            {% endif %}
            <div id="pagination" class="row-center"></div>
        </div>


        {# Ajout du modal identique à celui de home #}
        {% include 'partials/modal.html.twig' %}
    </main>
{% endblock %}