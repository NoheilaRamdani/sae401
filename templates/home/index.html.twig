{% extends 'base.html.twig' %}

{% block title %}Accueil - Cahier de texte{% endblock %}
{% block description %}DÃ©couvrez lâ€™agenda MMI pour gÃ©rer vos devoirs et organiser vos tÃ¢ches !{% endblock %}


{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Style pour le pop-up des suggestions */
        div[data-suggestions] {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 300px;
            max-height: 250px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 1001;
            padding: 10px;
            overflow-y: auto;
            opacity: 1;
            transition: opacity 0.3s ease-in-out;
        }



        div[data-suggestions] h4 {
            margin: 0 0 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
            color: #333;
        }

        div[data-suggestions] h4 span {
            font-weight: bold;
        }

        div[data-suggestions] ul {
            list-style: none;
            padding: 0;
            margin: 0 0 8px;
        }

        div[data-suggestions] ul li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
            font-size: 12px;
            color: #555;
        }

        div[data-suggestions] ul li:last-child {
            border-bottom: none;
        }

        div[data-suggestions] ul li strong {
            color: #333;
        }

        div[data-suggestions] ul li a {
            color: #007bff;
            text-decoration: none;
            margin-left: 8px;
            font-size: 11px;
        }

        div[data-suggestions] ul li a:hover {
            text-decoration: underline;
        }

        div[data-suggestions] > a {
            display: block;
            text-align: center;
            color: #007bff;
            text-decoration: none;
            font-size: 12px;
        }

        div[data-suggestions] > a:hover {
            text-decoration: underline;
        }

        /* Style pour le bouton "Afficher les suggestions" */
        button[data-show-suggestions] {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background-color: #007bff !important;
            color: #fff !important;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 1002 !important; /* Augmenter pour Ãªtre au-dessus du calendrier */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        button[data-show-suggestions]:hover {
            background-color: #0056b3 !important;
        }

        button[data-show-suggestions] i {
            margin: 0;
        }

        /* Style de secours si l'icÃ´ne ne se charge pas */
        button[data-show-suggestions]::after {
            content: "ðŸ””"; /* Emoji de cloche comme secours */
            font-size: 16px;
            display: none;
        }

        /* Si Font Awesome Ã©choue, afficher le contenu de secours */
        button[data-show-suggestions].no-icon::after {
            display: block;
        }

        #closeSuggestions {
            background: none;
            border: none;
            color: #dc3545;
            cursor: pointer;
            font-size: 12px;
        }

        #closeSuggestions:hover {
            text-decoration: underline;
        }

        /* S'assurer que le calendrier ne dÃ©passe pas le z-index du bouton */
        .calendar-container, #calendar {
            position: relative;
            z-index: 1 !important; /* Forcer un z-index bas pour le calendrier */
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                buttonText: {
                    today: 'Aujourd\'hui'},
                events: '/api/assignments' + (new URLSearchParams(window.location.search).toString() ? '?' + new URLSearchParams(window.location.search).toString() : ''),
                eventClick: function(info) {
                    info.jsEvent.preventDefault();
                    fetch(`/api/assignments/${info.event.id}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('ID cliquÃ©:', info.event.id);
                            console.log('Data from API:', data);
                            showEventDetails(data);
                        });
                }
            });
            calendar.render();


            document.querySelectorAll(".group-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const type = this.dataset.type;
                    const url = new URL(window.location);
                    if (type) {
                        url.searchParams.set("type", type);
                    } else {
                        url.searchParams.delete("type"); // Supprime le filtre si "Tous" est sÃ©lectionnÃ©
                    }
                    window.location.href = url.toString(); // Recharge la page avec le nouveau filtre
                });
            });

// Fonction pour ajuster la position de .tasks-container en fonction de la hauteur visible de la nav
            function adjustTasksContainerPosition() {
                const tasksContainer = document.querySelector('.tasks-container');
                const nav = document.querySelector('nav');

                if (tasksContainer && nav) {
                    // Calculer la position de la nav par rapport Ã  la fenÃªtre
                    const navRect = nav.getBoundingClientRect();

                    // La hauteur visible de la nav est la diffÃ©rence entre la position en bas de la nav et la position en haut de la fenÃªtre
                    const navVisibleHeight = Math.max(0, Math.min(navRect.bottom, window.innerHeight) - Math.max(0, navRect.top));

                    // Appliquer le padding-top Ã  .tasks-container en fonction de la hauteur visible de la nav
                    const currentPaddingTop = 30; // Valeur fixe que tu as dÃ©finie pour le padding
                    tasksContainer.style.paddingTop = (navVisibleHeight + currentPaddingTop) + 'px';
                }
            }

// Ajouter un Ã©couteur d'Ã©vÃ©nements pour recalculer Ã  chaque scroll
            window.addEventListener('scroll', adjustTasksContainerPosition);

// Appeler la fonction une premiÃ¨re fois pour initialiser la position
            adjustTasksContainerPosition();





            // FONCTION POUR RAYER LES TASK DONE
            document.querySelectorAll('.event-item').forEach(item => {
                const checkbox = item.querySelector('input[type="checkbox"]');
                const checkEnabledElements = item.querySelectorAll('.check-enabled');
                if (checkbox && checkEnabledElements.length > 0) {
                    if (checkbox.checked) {
                        checkEnabledElements.forEach(element => {
                            element.classList.add('completed-task');
                        });
                    }

                    checkbox.addEventListener('change', function(e) {
                        e.stopPropagation();
                        const eventId = this.dataset.id;
                        fetch(`/api/assignments/${eventId}/toggle-complete`, { method: 'POST' })
                            .then(response => response.json())
                            .then(data => {
                                const calendarEvent = calendar.getEventById(eventId);
                                if (calendarEvent) {
                                    calendarEvent.setProp('classNames', data.isCompleted ? ['completed-event'] : []);
                                }

                                checkEnabledElements.forEach(element => {
                                    if (data.isCompleted) {
                                        element.classList.add('completed-task');
                                    } else {
                                        element.classList.remove('completed-task');
                                    }
                                });
                            });
                    });
                }

                item.addEventListener('click', function(e) {
                    if (e.target.tagName === 'INPUT') {
                        e.stopPropagation();
                        return;
                    }
                    const eventId = this.dataset.id;
                    fetch(`/api/assignments/${eventId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('ID cliquÃ©:', eventId);
                            console.log('Data from API:', data);
                            showEventDetails(data);
                        });
                });
            });


            // FONCTION POUR OUVRIR ET AFFICHER LE MODAL
            function showEventDetails(event) {
                console.log('Event passÃ© Ã  showEventDetails:', event);

                document.getElementById('modalTitle').textContent = event.title || 'Sans titre';

                const dueDate = new Date(event.start);
                const day = String(dueDate.getUTCDate()).padStart(2, '0');
                const month = String(dueDate.getUTCMonth() + 1).padStart(2, '0');
                const year = dueDate.getUTCFullYear();
                const hours = String(dueDate.getUTCHours()).padStart(2, '0');
                const minutes = String(dueDate.getUTCMinutes()).padStart(2, '0');
                document.getElementById('modalDate').textContent = `${day}/${month}/${year} - ${hours}:${minutes}` || 'Date inconnue';

                document.getElementById('modalDescription').textContent = event.description || 'Aucune description';
                document.getElementById('modalSubjectCode').textContent = event.subject?.code || 'Non spÃ©cifiÃ©';
                document.getElementById('modalSubjectName').textContent = event.subject?.name || 'Non spÃ©cifiÃ©';

                const submissionUrlEl = document.getElementById('modalSubmissionUrl');
                if (event.submissionUrl) {
                    submissionUrlEl.innerHTML = `<a href="${event.submissionUrl}" target="_blank">${event.submissionUrl}</a>`;
                } else {
                    submissionUrlEl.textContent = 'Aucune URL de rendu';
                }

                const submissionTypeDisplay = (event.submissionType && event.submissionType.toLowerCase() === 'other') ? 'Autre' : event.submissionType || 'Non spÃ©cifiÃ©';
                document.getElementById('modalSubmissionType').textContent = submissionTypeDisplay;

                const submissionOtherContainer = document.getElementById('modalSubmissionOtherContainer');
                if (event.submissionType && event.submissionType.toLowerCase() === 'other' && event.submissionOther) {
                    document.getElementById('modalSubmissionOther').textContent = event.submissionOther;
                    submissionOtherContainer.style.display = 'block';
                } else {
                    submissionOtherContainer.style.display = 'none';
                }

                document.getElementById('modalType').textContent = event.type || 'Non spÃ©cifiÃ©';
                document.getElementById('modalCompleted').checked = event.isCompleted || false;
                document.getElementById('eventModal').dataset.id = event.id;

                const editAssignmentLink = document.getElementById('editAssignment');
                if (editAssignmentLink) {
                    editAssignmentLink.href = `/assignments/${event.id}/edit`;
                }

                document.getElementById('eventModal').style.display = 'flex';

                const modalCheckbox = document.getElementById('modalCompleted');
                modalCheckbox.addEventListener('change', function() {
                    const eventId = document.getElementById('eventModal').dataset.id;
                    const isCompleted = this.checked;

                    fetch(`/api/assignments/${eventId}/toggle-complete`, {
                        method: 'POST'
                    }).then(response => response.json())
                        .then(data => {
                            const listItem = document.querySelector(`div[data-id="${eventId}"]`);
                            if (listItem) {
                                listItem.querySelector('input[type="checkbox"]').checked = isCompleted;
                                const calendarEvent = calendar.getEventById(eventId);
                                if (calendarEvent) {
                                    calendarEvent.setProp('classNames', isCompleted ? ['completed-event'] : []);
                                }
                                const checkEnabledElements = listItem.querySelectorAll('.check-enabled');
                                checkEnabledElements.forEach(element => {
                                    if (data.isCompleted) {
                                        element.classList.add('completed-task');
                                    } else {
                                        element.classList.remove('completed-task');
                                    }
                                });
                            }
                        });
                });
            }

            const suggestModificationBtn = document.getElementById('suggestModification');
            if (suggestModificationBtn) {
                suggestModificationBtn.addEventListener('click', function() {
                    const eventId = document.getElementById('eventModal').dataset.id;
                    window.location.href = `/assignment/${eventId}/suggest`;
                });
            }

            document.getElementById('closeModal').addEventListener('click', function() {
                document.getElementById('eventModal').style.display = 'none';
            });

            const notifications = {{ notifications|json_encode|raw }};
            notifications.forEach(notification => {
                const div = document.createElement('div');
                div.textContent = `Attention : "${notification.title}" dans ${notification.hoursUntilDue}h !`;
                document.body.appendChild(div);
                setTimeout(() => div.remove(), 5000);
            });

            const suggestionsBox = document.querySelector('div[data-suggestions]');
            const showSuggestionsBtn = document.querySelector('button[data-show-suggestions]');
            if (suggestionsBox && showSuggestionsBtn) {
                const isHidden = localStorage.getItem('suggestionsBoxHidden') === 'true';
                if (isHidden) {
                    suggestionsBox.style.display = 'none';
                    showSuggestionsBtn.style.display = 'flex';
                } else {
                    suggestionsBox.style.display = 'block';
                    showSuggestionsBtn.style.display = 'none';
                }

                document.getElementById('closeSuggestions').addEventListener('click', function() {
                    suggestionsBox.style.display = 'none';
                    showSuggestionsBtn.style.display = 'flex';
                    localStorage.setItem('suggestionsBoxHidden', 'true');
                });

                showSuggestionsBtn.addEventListener('click', function() {
                    suggestionsBox.style.display = 'block';
                    showSuggestionsBtn.style.display = 'none';
                    localStorage.setItem('suggestionsBoxHidden', 'false');
                });

                function updateSuggestions() {
                    fetch('/api/suggestions/pending', {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            const suggestionsList = suggestionsBox.querySelector('ul');
                            if (!suggestionsList) return;

                            suggestionsList.innerHTML = '';
                            data.forEach(suggestion => {
                                const li = document.createElement('li');
                                li.dataset.id = suggestion.id;
                                li.innerHTML = `
                                <strong>${suggestion.suggestedBy}</strong> pour "[${suggestion.assignment.subjectCode}] ${suggestion.assignment.title}" : ${suggestion.message || 'Aucun message'}
                                <a href="/suggestions/${suggestion.id}/review" style="margin-left: 10px;">Voir la suggestion</a>
                            `;
                                suggestionsList.appendChild(li);
                            });

                            if (data.length === 0) {
                                suggestionsBox.style.display = 'none';
                                showSuggestionsBtn.style.display = 'flex';
                                localStorage.setItem('suggestionsBoxHidden', 'true');
                            } else {
                                suggestionsBox.style.display = 'block';
                                showSuggestionsBtn.style.display = 'none';
                                localStorage.setItem('suggestionsBoxHidden', 'false');
                            }
                        })
                        .catch(error => console.error('Erreur lors du chargement des suggestions :', error));
                }

                // VÃ©rifier si Font Awesome est chargÃ©
                const fontAwesomeLoaded = document.querySelector('link[href*="font-awesome"]') || document.querySelector('link[href*="fontawesome"]');
                if (!fontAwesomeLoaded) {
                    showSuggestionsBtn.classList.add('no-icon');
                }

                updateSuggestions();
                document.addEventListener('suggestionProcessed', updateSuggestions);
            }
        });
    </script>
{% endblock %}

{% block body %}
    <main class="home">
        <div class="calendar-container">
            <h1 class="sr-only">Calendrier des tÃ¢ches</h1>

            <div class="group-buttons-container">
                <div class="group-buttons">
                    <button class="group-btn {{ type_filter == '' ? 'current' }}" data-type="">Tous</button>
                    <button class="group-btn {{ type_filter == 'devoir' ? 'current' }}" data-type="devoir">Devoir</button>
                    <button class="group-btn {{ type_filter == 'examen' ? 'current' }}" data-type="examen">Examen</button>
                    <button class="group-btn {{ type_filter == 'oral' ? 'current' }}" data-type="oral">Oral</button>
                </div>
            </div>
            <div id="calendar"></div>
        </div>

        <div class="tasks-container">
            <div class="main-content column-start-start">
                <h2><i class="fa-solid fa-calendar"></i> A venir</h2>

                {% if assignments_data|length > 0 %}
                    {% for data in assignments_data %}
                        {% set assignment = data.assignment %}
                        {% set now = "now"|date('U') %}
                        {% set dueDate = assignment.dueDate|date('U') %}
                        {% set daysUntilDue = (dueDate - now) / (60 * 60 * 24) %}
                        {% set daysUntilDue = daysUntilDue|round(0, 'floor') %}

                        <div data-id="{{ assignment.id }}" class="event-item task-container column-start {{ data.urgencyClass }}">
                            <span class="color" style="background-color: {{ data.color }}"></span>
                            <div class="top row-start">
                                <p class="date">{{ assignment.dueDate|date('d/m/Y - H:i') }}</p>
                                <p class="tag-small">{{ assignment.type|capitalize }}</p>
                            </div>
                            <div class="content row-spacebtwn">
                                <div class="task row-start">
                                    <input type="checkbox" data-id="{{ assignment.id }}" {{ data.isCompleted ? 'checked' }}>
                                    <div class="details column-start">
                                        <p class="check-enabled name">
                                            {{ assignment.title }}
                                        </p>
                                        <p class="check-enabled subject">[{{ data.subjectCode }}] - {{ assignment.subject.name }}</p>
                                    </div>
                                </div>
                                <div class="countdown row-start">
                                    <i class="check-enabled fa-solid fa-clock {{ data.urgencyClass }}"></i>
                                    <p class="check-enabled {{ data.hoursUntilDue < 24 and data.hoursUntilDue >= 0 ? 'urgent-time' : '' }}">
                                        {% if data.hoursUntilDue < 0 %}
                                            ExpirÃ©
                                        {% elseif data.hoursUntilDue < 24 %}
                                            {{ data.hoursUntilDue }} heure{{ data.hoursUntilDue > 1 ? 's' : '' }}
                                        {% else %}
                                            {{ daysUntilDue }} jour{{ daysUntilDue > 1 ? 's' : '' }}
                                        {% endif %}
                                    </p>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <p>Aucun devoir Ã  venir.</p>
                {% endif %}
            </div>
            <a class="button-grey" href="{{ path('app_assignments_history') }}"><i class="fa-solid fa-clock-rotate-left"></i> Historique des tÃ¢ches</a>
        </div>

        <div id="eventModal" class="modal-container" style="display: none;">
            <div class="modal">
                <button id="closeModal"><i class="fa-solid fa-xmark"></i></button>
                <h3 id="modalTitle"></h3>
                <ul>
                    <li id="modalType" class="tag"></li>
                    <li class="title"><i class="fa-solid fa-bookmark"></i> MatiÃ¨re</li>
                    <li><span id="modalSubjectCode"></span> - <span id="modalSubjectName"></span></li>
                    <li class="title"><i class="fa-solid fa-calendar-day"></i> Date</li>
                    <li id="modalDate"></li>
                    <li class="title"><i class="fa-solid fa-file-lines"></i> Description</li>
                    <li id="modalDescription"></li>
                    <li class="plateformes">
                        <span class="title"><i class="fa-solid fa-layer-group"></i> Consignes et rendu</span>
                        <ul>
                            <li>- <span class="subtitle">Sujet</span> : <span id="modalSubmissionType"></span></li>
                            <li>- <span class="subtitle">Mode de rendu</span> : <span id="modalSubmissionInstruction"></span></li>
                            <li id="modalSubmissionOtherContainer" style="display: none;"><span class="subtitle">PrÃ©cision</span> : <span id="modalSubmissionOther"></span></li>
                            <li>- <span class="subtitle">URL de rendu</span> : <span id="modalSubmissionUrl"></span></li>
                        </ul>
                    </li>
                    <div class="done">
                        <input type="checkbox" id="modalCompleted" name="done" />
                        <label for="done">Fait</label>
                    </div>
                </ul>

                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DELEGATE') %}
                    <a class="button" href="" id="editAssignment"><i class="fa-solid fa-pencil"></i> Modifier le devoir</a>
                {% else %}
                    <button class="button" id="suggestModification"><i class="fa-solid fa-pencil"></i> SuggÃ©rer une modification</button>
                {% endif %}
            </div>
        </div>

        {% if is_granted('ROLE_DELEGATE') %}
            <div data-suggestions>
                <h4>
                    <span>Suggestions de modifications</span>
                    <button id="closeSuggestions">Fermer</button>
                </h4>
                <ul></ul>
                <a href="{{ path('app_suggestions') }}">Voir l'historique complet</a>
            </div>
            <button data-show-suggestions title="Afficher les suggestions">
                <i class="fa-solid fa-bell"></i>
                <span class="sr-only">Afficher les suggestions</span>
            </button>
        {% endif %}
    </main>
{% endblock %}