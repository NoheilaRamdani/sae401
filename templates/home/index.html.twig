{% extends 'base.html.twig' %}

{% block title %}Accueil - Cahier de texte{% endblock %}

{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                events: '/api/assignments' + (new URLSearchParams(window.location.search).toString() ? '?' + new URLSearchParams(window.location.search).toString() : ''),
                eventClick: function(info) {
                    info.jsEvent.preventDefault();
                    fetch(`/api/assignments/${info.event.id}`)
                        .then(response => response.json())
                        .then(data => showEventDetails({
                            id: data.id,
                            title: data.title,
                            start: new Date(data.start),
                            extendedProps: data
                        }));
                }
            });
            calendar.render();

            document.querySelectorAll('.event-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    if (e.target.tagName === 'INPUT') {
                        e.stopPropagation();
                        return;
                    }
                    const eventId = this.dataset.id;
                    fetch(`/api/assignments/${eventId}`)
                        .then(response => response.json())
                        .then(data => showEventDetails({
                            id: data.id,
                            title: data.title,
                            start: new Date(data.start),
                            extendedProps: data
                        }));
                });

                const checkbox = item.querySelector('input[type="checkbox"]');
                if (checkbox) {
                    checkbox.addEventListener('change', function(e) {
                        e.stopPropagation();
                        const eventId = this.dataset.id;
                        fetch(`/api/assignments/${eventId}/toggle-complete`, { method: 'POST' })
                            .then(response => response.json())
                            .then(data => {
                                const calendarEvent = calendar.getEventById(eventId);
                                if (calendarEvent) {
                                    calendarEvent.setProp('classNames', data.isCompleted ? ['completed-event'] : []);
                                }
                            });
                    });
                }
            });

            function showEventDetails(event) {
                document.getElementById('modalTitle').textContent = event.title;
                document.getElementById('modalDate').textContent = event.start.toLocaleString();
                document.getElementById('modalCreatedAt').textContent = event.extendedProps.createdAt || 'Inconnu';
                document.getElementById('modalDescription').textContent = event.extendedProps.description || 'Aucune description';
                const submissionUrlEl = document.getElementById('modalSubmissionUrl');
                if (event.extendedProps.submissionUrl) {
                    submissionUrlEl.innerHTML = `<a href="${event.extendedProps.submissionUrl}" target="_blank">${event.extendedProps.submissionUrl}</a>`;
                } else {
                    submissionUrlEl.textContent = 'Aucune URL de soumission';
                }
                document.getElementById('modalType').textContent = event.extendedProps.type || 'Non spécifié';
                document.getElementById('modalCompleted').checked = event.extendedProps.isCompleted;
                document.getElementById('eventModal').dataset.id = event.id;
            }

            const suggestModificationBtn = document.getElementById('suggestModification');
            if (suggestModificationBtn) {
                suggestModificationBtn.addEventListener('click', function() {
                    const eventId = document.getElementById('eventModal').dataset.id;
                    window.location.href = `/assignments/${eventId}/suggest-modification-form`;
                });
            }

            document.getElementById('closeModal').addEventListener('click', function() {
                document.getElementById('eventModal').style.display = 'none';
            });

            document.getElementById('modalCompleted').addEventListener('change', function() {
                const eventId = document.getElementById('eventModal').dataset.id;
                fetch(`/api/assignments/${eventId}/toggle-complete`, { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        const listItem = document.querySelector(`div[data-id="${eventId}"]`);
                        if (listItem) {
                            listItem.querySelector('input[type="checkbox"]').checked = data.isCompleted;
                        }
                        const calendarEvent = calendar.getEventById(eventId);
                        if (calendarEvent) {
                            calendarEvent.setProp('classNames', data.isCompleted ? ['completed-event'] : []);
                        }
                    });
            });

            const notifications = {{ notifications|json_encode|raw }};
            notifications.forEach(notification => {
                const div = document.createElement('div');
                div.textContent = `Attention : "${notification.title}" dans ${notification.hoursUntilDue}h !`;
                document.body.appendChild(div);
                setTimeout(() => div.remove(), 5000);
            });

            const suggestionsBox = document.querySelector('div[data-suggestions]');
            const showSuggestionsBtn = document.querySelector('button[data-show-suggestions]');
            if (suggestionsBox && showSuggestionsBtn) {
                const isHidden = localStorage.getItem('suggestionsBoxHidden') === 'true';
                if (isHidden) {
                    suggestionsBox.style.display = 'none';
                    showSuggestionsBtn.style.display = 'block';
                }

                document.getElementById('closeSuggestions').addEventListener('click', function() {
                    suggestionsBox.style.display = 'none';
                    showSuggestionsBtn.style.display = 'block';
                    localStorage.setItem('suggestionsBoxHidden', 'true');
                });

                showSuggestionsBtn.addEventListener('click', function() {
                    suggestionsBox.style.display = 'block';
                    showSuggestionsBtn.style.display = 'none';
                    localStorage.setItem('suggestionsBoxHidden', 'false');
                });

                function updateSuggestions() {
                    fetch('/api/suggestions/pending')
                        .then(response => response.json())
                        .then(data => {
                            const suggestionsList = suggestionsBox.querySelector('ul');
                            if (!suggestionsList) return;

                            suggestionsList.innerHTML = '';
                            data.forEach(suggestion => {
                                const li = document.createElement('li');
                                li.dataset.id = suggestion.id;
                                li.innerHTML = `<strong>${suggestion.suggestedBy}</strong> pour "[${suggestion.assignment.subjectCode}] ${suggestion.assignment.title}" : ${suggestion.message}`;
                                suggestionsList.appendChild(li);
                            });

                            if (data.length === 0) {
                                suggestionsBox.style.display = 'none';
                                showSuggestionsBtn.style.display = 'block';
                                localStorage.setItem('suggestionsBoxHidden', 'true');
                            }
                        });
                }

                updateSuggestions();
                document.addEventListener('suggestionProcessed', updateSuggestions);
            }
        });
    </script>
{% endblock %}

{% block body %}
    <div>
        <h2>Calendrier des devoirs</h2>
        <form method="get">
            <label for="type">Filtrer par type :</label>
            <select name="type" id="type" onchange="this.form.submit()">
                <option value="">Tous</option>
                <option value="devoir" {{ type_filter == 'devoir' ? 'selected' }}>Devoir</option>
                <option value="examen" {{ type_filter == 'examen' ? 'selected' }}>Examen</option>
                <option value="oral" {{ type_filter == 'oral' ? 'selected' }}>Oral</option>
            </select>
        </form>
        <div id="calendar"></div>
        <a href="{{ path('app_assignments_history') }}">Voir l'historique des devoirs</a>
    </div>
    <div>
        <h2>Prochains devoirs</h2>
        {% if assignments_data|length > 0 %}
            {% for data in assignments_data %}
                {% set assignment = data.assignment %}
                <div data-id="{{ assignment.id }}" class="event-item">
                    <input type="checkbox" data-id="{{ assignment.id }}" {{ data.isCompleted ? 'checked' }}>
                    <div>
                        <strong> [{{ data.subjectCode }}] {{ assignment.title }}</strong><br>
                        <small> {{ assignment.dueDate|date('d/m/Y H:i') }}</small>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <p>Aucun devoir à venir.</p>
        {% endif %}
    </div>
    <div id="eventModal">
        <div>
            <h3><span id="modalTitle"></span></h3>
            <p><strong>Date :</strong> <span id="modalDate"></span></p>
            <p><strong>Date de saisie :</strong> <span id="modalCreatedAt"></span></p>
            <p><strong>Type :</strong> <span id="modalType"></span></p>
            <p><strong>Description :</strong> <span id="modalDescription"></span></p>
            <p><strong>URL de soumission :</strong> <span id="modalSubmissionUrl"></span></p>
            <p><strong>Effectué :</strong> <input type="checkbox" id="modalCompleted"></p>
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DELEGATE') %}
                <a href="#" id="editAssignment">Modifier le devoir</a>
            {% else %}
                <button id="suggestModification">Suggérer une modification</button>
            {% endif %}
            <button id="closeModal">Fermer</button>
        </div>
    </div>
    {% if is_granted('ROLE_DELEGATE') %}
        <div data-suggestions>
            <h4>
                <span>Suggestions de modifications</span>
                <button id="closeSuggestions">Fermer</button>
            </h4>
            <ul>
                {% for suggestion in suggestions %}
                    <li data-id="{{ suggestion.id }}">
                        <strong>{{ suggestion.suggestedBy.userIdentifier }}</strong> pour "[{{ suggestion.assignment.subject.code }}] {{ suggestion.assignment.title }}" : {{ suggestion.message }}
                    </li>
                {% endfor %}
            </ul>
            <a href="{{ path('app_suggestions') }}">Voir l'historique complet</a>
        </div>
        <button data-show-suggestions>Afficher les suggestions</button>
    {% endif %}
{% endblock %}